//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18449
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Shove.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "10.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"" +
            "http://www.w3.org/1999/XSL/Transform\" xmlns:fo=\"http://www.w3.org/1999/XSL/Forma" +
            "t\" xmlns:ebl=\"urn:ebay:apis:eBLBaseComponents\" exclude-result-prefixes=\"ebl\">\r\n " +
            "   <!--=========================================================================" +
            "=========== \r\n    Original version by : Holten Norris ( holtennorris at yahoo.co" +
            "m ) \r\n    Current version maintained  by: Alan Lewis (alanlewis at gmail.com) \r\n" +
            "    Thanks to Venu Reddy from eBay XSLT team for help with the array detection c" +
            "ode \r\n    Protected by CDDL open source license.  \r\n    Transforms XML into Java" +
            "Script objects, using a JSON format. \r\n    =====================================" +
            "================================================ -->\r\n    <xsl:output method=\"te" +
            "xt\" encoding=\"UTF-8\"/>\r\n    <xsl:template match=\"*\">\r\n        <xsl:param name=\"r" +
            "ecursionCnt\">0</xsl:param>\r\n        <xsl:param name=\"isLast\">1</xsl:param>\r\n    " +
            "    <xsl:param name=\"inArray\">0</xsl:param>\r\n        <xsl:if test=\"$recursionCnt" +
            "=0\">\r\n            <xsl:text></xsl:text>\r\n        </xsl:if>\r\n        <!-- test wh" +
            "at type of data to output  -->\r\n        <xsl:variable name=\"elementDataType\">\r\n " +
            "           <xsl:value-of select=\"number(text())\"/>\r\n        </xsl:variable>\r\n   " +
            "     <xsl:variable name=\"elementData\">\r\n            <!-- TEXT ( use quotes ) -->" +
            "\r\n            <xsl:if test=\"string($elementDataType) =\'NaN\'\">\r\n                <" +
            "xsl:if test=\"boolean(text())\">\r\n                    <xsl:if test=\"not(*)\">\r\n    " +
            "                    \"<xsl:value-of select=\"text()\"/>\"\r\n                    </xsl" +
            ":if>\r\n                </xsl:if>\r\n            </xsl:if>\r\n            <!-- NUMBER " +
            "(no quotes ) -->\r\n            <xsl:if test=\"string($elementDataType) !=\'NaN\'\">\r\n" +
            "                <xsl:value-of select=\"text()\"/>\r\n            </xsl:if>\r\n        " +
            "    <!-- NULL -->\r\n            <xsl:if test=\"not(*)\">\r\n                <xsl:if t" +
            "est=\"not(text())\">\r\n                    null\r\n                </xsl:if>\r\n       " +
            "     </xsl:if>\r\n        </xsl:variable>\r\n        <xsl:variable name=\"hasRepeatEl" +
            "ements\">\r\n            <xsl:for-each select=\"*\">\r\n                <xsl:if test=\"n" +
            "ame() = name(preceding-sibling::*) or name() = name(following-sibling::*)\">\r\n   " +
            "                 true\r\n                </xsl:if>\r\n            </xsl:for-each>\r\n " +
            "       </xsl:variable>\r\n        <xsl:if test=\"not(count(@*) &gt; 0)\">\r\n         " +
            "   \"<xsl:value-of select=\"local-name()\"/>\": <xsl:value-of select=\"$elementData\"/" +
            ">\r\n        </xsl:if>\r\n        <xsl:if test=\"count(@*) &gt; 0\">\r\n            \"<xs" +
            "l:value-of select=\"local-name()\"/>\": {\r\n            \"content\": <xsl:value-of sel" +
            "ect=\"$elementData\"/>\r\n            <xsl:for-each select=\"@*\">\r\n                <x" +
            "sl:if test=\"position()=1\">,</xsl:if>\r\n                <!-- test what type of dat" +
            "a to output  -->\r\n                <xsl:variable name=\"dataType\">\r\n              " +
            "      <xsl:value-of select=\"number(.)\"/>\r\n                </xsl:variable>\r\n     " +
            "           <xsl:variable name=\"data\">\r\n                    <!-- TEXT ( use quote" +
            "s ) -->\r\n                    <xsl:if test=\"string($dataType) =\'NaN\'\">\r\n         " +
            "               \"<xsl:value-of select=\"current()\"/>\"\r\n                    </xsl:i" +
            "f>\r\n                    <!-- NUMBER (no quotes ) -->\r\n                    <xsl:i" +
            "f test=\"string($dataType) !=\'NaN\'\">\r\n                        <xsl:value-of selec" +
            "t=\"current()\"/>\r\n                    </xsl:if>\r\n                </xsl:variable>\r" +
            "\n                <xsl:value-of select=\"local-name()\"/>:<xsl:value-of select=\"$da" +
            "ta\"/>\r\n                <xsl:if test=\"position() !=last()\">, </xsl:if>\r\n         " +
            "   </xsl:for-each>\r\n            }\r\n        </xsl:if>\r\n        <xsl:if test=\"not(" +
            "$hasRepeatElements = \'\')\">\r\n            [{\r\n        </xsl:if>\r\n        <xsl:for-" +
            "each select=\"*\">\r\n            <xsl:if test=\"position()=1\">\r\n                <xsl" +
            ":if test=\"$hasRepeatElements = \'\'\">\r\n                    <xsl:text> { </xsl:text" +
            ">\r\n                </xsl:if>\r\n            </xsl:if>\r\n            <xsl:apply-temp" +
            "lates select=\"current()\">\r\n                <xsl:with-param name=\"recursionCnt\" s" +
            "elect=\"$recursionCnt+1\"/>\r\n                <xsl:with-param name=\"isLast\" select=" +
            "\"position()=last()\"/>\r\n                <xsl:with-param name=\"inArray\" select=\"no" +
            "t($hasRepeatElements = \'\')\"/>\r\n            </xsl:apply-templates>\r\n            <" +
            "xsl:if test=\"position()=last()\">\r\n                <xsl:if test=\"$hasRepeatElemen" +
            "ts = \'\'\">\r\n                    <xsl:text> } </xsl:text>\r\n                </xsl:i" +
            "f>\r\n            </xsl:if>\r\n        </xsl:for-each>\r\n        <xsl:if test=\"not($h" +
            "asRepeatElements = \'\')\">\r\n            }]\r\n        </xsl:if>\r\n        <xsl:if tes" +
            "t=\"not( $isLast )\">\r\n            <xsl:if test=\"$inArray = \'true\'\">\r\n            " +
            "    <xsl:text> } </xsl:text>\r\n            </xsl:if>\r\n            ,\r\n            " +
            "<xsl:if test=\"$inArray = \'true\'\">\r\n                <xsl:text> { </xsl:text>\r\n   " +
            "         </xsl:if>\r\n        </xsl:if>\r\n        <xsl:if test=\"$recursionCnt=0\"></" +
            "xsl:if>\r\n    </xsl:template>\r\n</xsl:stylesheet>\r\n")]
        public string Xml2JsonXslt {
            get {
                return ((string)(this["Xml2JsonXslt"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.SpecialSettingAttribute(global::System.Configuration.SpecialSetting.WebServiceUrl)]
        [global::System.Configuration.DefaultSettingValueAttribute("http://newton.shovesoft.com/Service.asmx")]
        public string Shove_NewtonServices_Service {
            get {
                return ((string)(this["Shove_NewtonServices_Service"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.SpecialSettingAttribute(global::System.Configuration.SpecialSetting.WebServiceUrl)]
        [global::System.Configuration.DefaultSettingValueAttribute("http://sms.gateway.i3km.com/sms_gateway.asmx")]
        public string Shove_I3kmSMS_GatewayService_sms_gateway {
            get {
                return ((string)(this["Shove_I3kmSMS_GatewayService_sms_gateway"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.SpecialSettingAttribute(global::System.Configuration.SpecialSetting.WebServiceUrl)]
        [global::System.Configuration.DefaultSettingValueAttribute("http://icp.shovesoft.com/Gateway.asmx")]
        public string Shove_com_shovesoft_icp_Gateway {
            get {
                return ((string)(this["Shove_com_shovesoft_icp_Gateway"]));
            }
        }
    }
}
