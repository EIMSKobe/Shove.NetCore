<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CLT_MasterCode" xml:space="preserve">
    <value>using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using Microsoft.SqlServer.Server;

namespace Shove.CLR
{
    /// &lt;summary&gt;
    /// Shove 的专用的 MS SQLServer 访问组件类
    /// &lt;/summary&gt;
    public class MSSQL
    {
        #region Parameter

        /// &lt;summary&gt;
        /// 参数
        /// &lt;/summary&gt;
        public class Parameter
        {
            public string Name;
            public SqlDbType Type;
            public int Size;
            public ParameterDirection Direction;
            public object Value;

            public Parameter(string name, SqlDbType type, int size, ParameterDirection direction, object value)
            {
                Name = name;
                Type = type;
                Size = size;
                Direction = direction;
                Value = value;
            }
        }

        /// &lt;summary&gt;
        /// 输入参数
        /// &lt;/summary&gt;
        public class OutputParameter
        {
            public ArrayList ParametersName;
            public ArrayList ParametersValue;

            public OutputParameter()
            {
                ParametersName = new ArrayList();
                ParametersValue = new ArrayList();
            }

            public void Add(string Name, object Value)
            {
                ParametersName.Add(Name.StartsWith("@") ? Name.Substring(1, Name.Length - 1) : Name);
                ParametersValue.Add(Value);
            }

            public void Clear()
            {
                ParametersName.Clear();
                ParametersValue.Clear();
            }

            public int Count
            {
                get
                {
                    if (ParametersName == null)
                    {
                        return 0;
                    }

                    return ParametersName.Count;
                }
            }

            public object this[int Index]
            {
                get
                {
                    if (ParametersValue == null)
                    {
                        return null;
                    }

                    if (ParametersValue.Count == 0)
                    {
                        return null;
                    }

                    return ParametersValue[Index];
                }
            }

            public object this[string Name]
            {
                get
                {
                    if (ParametersValue == null)
                    {
                        return null;
                    }

                    for (int i = 0; i &lt; ParametersName.Count; i++)
                    {
                        if (ParametersName[i].ToString() == Name)
                        {
                            return ParametersValue[i];
                        }
                    }

                    return null;
                }
            }
        }

        private static void AddParameter(ref SqlCommand Cmd, params Parameter[] Params)
        {
            if ((Params == null) || (Cmd == null))
            {
                return;
            }

            for (int i = 0; i &lt; Params.Length; i++)
            {
                if (Params[i] == null)
                {
                    continue;
                }

                SqlParameter param = new SqlParameter();
                param.ParameterName = Params[i].Name.StartsWith("@") ? Params[i].Name : ("@" + Params[i].Name);
                param.SqlDbType = Params[i].Type;

                if (Params[i].Size &gt; 0)
                {
                    param.Size = Params[i].Size;
                }

                param.Direction = Params[i].Direction;

                if (((Params[i].Direction == ParameterDirection.InputOutput) ||
                    (Params[i].Direction == ParameterDirection.Input)) &amp;&amp;
                    (Params[i].Value != null))
                {
                    param.Value = Params[i].Value;
                }

                Cmd.Parameters.Add(param);
            }
        }

        private static void AddOutputParameter(SqlCommand Cmd, ref OutputParameter Outputs)
        {
            if (Cmd == null)
            {
                return;
            }

            if (Cmd.Parameters.Count == 0)
            {
                return;
            }

            for (int i = 0; i &lt; Cmd.Parameters.Count; i++)
            {
                SqlParameter param = Cmd.Parameters[i];

                if ((param.Direction != ParameterDirection.InputOutput) &amp;&amp;
                    (param.Direction != ParameterDirection.Output))
                {
                    continue;
                }

                Outputs.Add(param.ParameterName, param.Value);
            }
        }

        private static SqlParameter GetReturnParameter(SqlCommand Cmd)
        {
            if (Cmd == null)
            {
                return null;
            }

            if (Cmd.Parameters.Count == 0)
            {
                return null;
            }

            for (int i = 0; i &lt; Cmd.Parameters.Count; i++)
            {
                SqlParameter param = Cmd.Parameters[i];

                if (param.Direction == ParameterDirection.ReturnValue)
                {
                    return param;
                }
            }

            return null;
        }

        #endregion

        /// &lt;summary&gt;
        /// 执行数据库命令
        /// &lt;/summary&gt;
        /// &lt;param name="CommandText"&gt;&lt;/param&gt;
        /// &lt;param name="Params"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static int ExecuteNonQuery(string CommandText, params Parameter[] Params)
        {
            SqlConnection conn = new SqlConnection("context connection=true");
            conn.Open();

            SqlCommand Cmd = new SqlCommand(CommandText, conn);
            AddParameter(ref Cmd, Params);

            int Result = 0;

            try
            {
                Cmd.ExecuteNonQuery();
            }
            catch
            {
                Result = -1001;
            }
            finally
            {
                conn.Close();
            }

            return Result;
        }

        /// &lt;summary&gt;
        /// 打开数据集
        /// &lt;/summary&gt;
        /// &lt;param name="CommandText"&gt;&lt;/param&gt;
        /// &lt;param name="Params"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static DataTable Open(string CommandText, params Parameter[] Params)
        {
            SqlConnection conn = new SqlConnection("context connection=true");
            conn.Open();

            SqlDataAdapter da = new SqlDataAdapter("", conn);
            SqlCommand Cmd = new SqlCommand(CommandText, conn);

            AddParameter(ref Cmd, Params);
            da.SelectCommand = Cmd;

            DataTable dt = new DataTable();

            try
            {
                da.Fill(dt);
            }
            catch
            {
                dt = null;
            }
            finally
            {
                conn.Close();
            }

            return dt;
        }

        /// &lt;summary&gt;
        /// 读取记录集，并选择是否将此记录集发送到调用者
        /// &lt;/summary&gt;
        /// &lt;param name="CommandText"&gt;&lt;/param&gt;
        /// &lt;param name="Params"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static SqlDataReader Read(string CommandText, bool AndSend, params Parameter[] Params)
        {
            SqlConnection conn = new SqlConnection("context connection=true");
            conn.Open();

            SqlCommand Cmd = new SqlCommand(CommandText, conn);
            AddParameter(ref Cmd, Params);

            SqlDataReader Result = null;

            try
            {
                Result = Cmd.ExecuteReader();

                if (AndSend &amp;&amp; (Result != null))
                {
                    SqlContext.Pipe.Send(Result);
                }
            }
            catch { }
            finally
            {
                conn.Close();
            }

            return Result;
        }

        /// &lt;summary&gt;
        /// 读取第一行第一列
        /// &lt;/summary&gt;
        /// &lt;param name="CommandText"&gt;&lt;/param&gt;
        /// &lt;param name="Params"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static object ExecuteScalar(string CommandText, params Parameter[] Params)
        {
            SqlConnection conn = new SqlConnection("context connection=true");
            conn.Open();

            SqlCommand Cmd = new SqlCommand(CommandText, conn);
            AddParameter(ref Cmd, Params);

            object Result = null;

            try
            {
                Result = Cmd.ExecuteScalar();
            }
            catch { }
            finally
            {
                conn.Close();
            }

            return Result;
        }

        /// &lt;summary&gt;
        /// 执行函数
        /// &lt;/summary&gt;
        /// &lt;param name="FunctionName"&gt;&lt;/param&gt;
        /// &lt;param name="Params"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static object ExecuteFunction(string FunctionName, params Parameter[] Params)
        {
            string CommandText = "select " + FunctionName + "(";

            if (Params != null)
            {
                for (int i = 0; i &lt; Params.Length; i++)
                {
                    if (Params[i] != null)
                    {
                        bool isChar = false;
                        bool isNChar = false;

                        if ((Params[i].Type == SqlDbType.Char) || (Params[i].Type == SqlDbType.DateTime) || (Params[i].Type == SqlDbType.SmallDateTime) ||
                            (Params[i].Type == SqlDbType.Text) || (Params[i].Type == SqlDbType.UniqueIdentifier) || (Params[i].Type == SqlDbType.VarChar))
                        {
                            isChar = true;
                        }

                        if ((Params[i].Type == SqlDbType.NChar) || (Params[i].Type == SqlDbType.NText) || (Params[i].Type == SqlDbType.NVarChar))
                        {
                            isNChar = true;
                        }

                        if (!CommandText.EndsWith("("))
                        {
                            CommandText += ", ";
                        }

                        if (isChar)
                        {
                            CommandText += "\'";
                        }

                        if (isNChar)
                        {
                            CommandText += "N\'";
                        }

                        CommandText += Params[i].Value.ToString();

                        if (isChar || isNChar)
                        {
                            CommandText += "\'";
                        }
                    }
                }

                CommandText += ")";
            }

            return ExecuteScalar(CommandText);
        }

        /// &lt;summary&gt;
        /// 执行存储过程(无返回结果集)
        /// &lt;/summary&gt;
        /// &lt;param name="StoredProcedureName"&gt;&lt;/param&gt;
        /// &lt;param name="Outputs"&gt;&lt;/param&gt;
        /// &lt;param name="Params"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static int ExecuteStoredProcedureNonQuery(string StoredProcedureName, ref OutputParameter Outputs, params Parameter[] Params)
        {
            SqlConnection conn = new SqlConnection("context connection=true");
            conn.Open();

            SqlCommand Cmd = new SqlCommand(StoredProcedureName, conn);
            Cmd.CommandType = CommandType.StoredProcedure;

            AddParameter(ref Cmd, Params);

            // 增加返回值参数
            SqlParameter ReturnValue = new SqlParameter("@Shove_Database_MSSQL_ExecuteStoredProcedureNonQuery_Rtn", SqlDbType.Int);
            ReturnValue.Direction = ParameterDirection.ReturnValue;
            Cmd.Parameters.Add(ReturnValue);

            int Result = 0;

            try
            {
                Cmd.ExecuteNonQuery();
            }
            catch
            {
                Result = -1001;
            }
            finally
            {
                conn.Close();
            }

            if (Result &lt; 0)
            {
                return Result;
            }

            // 填写返回参数
            AddOutputParameter(Cmd, ref Outputs);

            // 获取过程的返回值
            ReturnValue = GetReturnParameter(Cmd);

            if (ReturnValue != null)
            {
                return (int)ReturnValue.Value;
            }

            return 0;
        }

        /// &lt;summary&gt;
        /// 执行存储过程(带返回记录集)
        /// &lt;/summary&gt;
        /// &lt;param name="StoredProcedureName"&gt;&lt;/param&gt;
        /// &lt;param name="ds"&gt;&lt;/param&gt;
        /// &lt;param name="Outputs"&gt;&lt;/param&gt;
        /// &lt;param name="Params"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static int ExecuteStoredProcedureWithQuery(string StoredProcedureName, ref DataSet ds, ref OutputParameter Outputs, params Parameter[] Params)
        {
            SqlConnection conn = new SqlConnection("context connection=true");
            conn.Open();

            SqlDataAdapter da = new SqlDataAdapter("", conn);
            SqlCommand Cmd = new SqlCommand(StoredProcedureName, conn);

            Cmd.CommandType = CommandType.StoredProcedure;
            Cmd.Parameters.Clear();
            AddParameter(ref Cmd, Params);

            // 增加返回值参数
            SqlParameter ReturnValue = new SqlParameter("@Shove_Database_MSSQL_ExecuteStoredProcedureWithQuery_Rtn", SqlDbType.Int);
            ReturnValue.Direction = ParameterDirection.ReturnValue;
            Cmd.Parameters.Add(ReturnValue);

            if (ds == null)
            {
                ds = new DataSet();
            }

            da.SelectCommand = Cmd;

            int Result = 0;

            try
            {
                da.Fill(ds);
            }
            catch
            {
                Result = -1001;
            }
            finally
            {
                conn.Close();
            }

            if (Result &lt; 0)
            {
                return Result;
            }

            //填写返回参数
            AddOutputParameter(Cmd, ref Outputs);

            // 获取过程的返回值
            ReturnValue = GetReturnParameter(Cmd);

            if (ReturnValue != null)
            {
                return (int)ReturnValue.Value;
            }

            return 0;
        }
    }

    /// &lt;summary&gt;
    /// DAL 通过一下四个类生成表、视图的访问的持久化代码
    /// &lt;/summary&gt;
    public class Utility
    {
        /// &lt;summary&gt;
        /// 表的字段类
        /// &lt;/summary&gt;
        public class Field
        {
            private object _Value;

            public object Parent;
            public string Name;
            public string CanonicalIdentifierName;
            public SqlDbType DbType;
            public bool ReadOnly;
            public object Value
            {
                get
                {
                    return _Value;
                }
                set
                {
                    if (ReadOnly)
                    {
                        throw new Exception("the member “" + Name + "” is ReadOnly.");
                    }

                    _Value = value;

                    if (Parent != null)
                    {
                        ((TableBase)Parent).Fields.Add(this);
                    }
                }
            }

            public Field(object parent, string name, string canonicalidentifiername, SqlDbType dbtype, bool _readonly)
            {
                Parent = parent;
                Name = name;
                CanonicalIdentifierName = canonicalidentifiername;
                DbType = dbtype;
                ReadOnly = _readonly;
            }
        }

        /// &lt;summary&gt;
        /// 表的修改的字段集合
        /// &lt;/summary&gt;
        public class FieldCollection
        {
            private ArrayList al = new ArrayList();

            public int Count
            {
                get
                {
                    return al.Count;
                }
            }

            public void Add(object obj)
            {
                al.Add(obj);
            }

            public void Clear()
            {
                al.Clear();
            }

            public Field this[int Index]
            {
                get
                {
                    if ((Count &lt; 1) || (Index &lt; 0) || (Index &gt; Count))
                    {
                        return null;
                    }

                    return (Field)al[Index];
                }
            }
        }

        /// &lt;summary&gt;
        /// 表的基类
        /// &lt;/summary&gt;
        public class TableBase
        {
            public string TableName = "";
            public FieldCollection Fields = new FieldCollection();

            /// &lt;summary&gt;
            /// 打开表
            /// &lt;/summary&gt;
            /// &lt;param name="FieldList"&gt;&lt;/param&gt;
            /// &lt;param name="Condition"&gt;&lt;/param&gt;
            /// &lt;param name="Order"&gt;&lt;/param&gt;
            /// &lt;returns&gt;&lt;/returns&gt;
            public DataTable Open(string FieldList, string Condition, string Order)
            {
                FieldList = FieldList.Trim();
                Condition = Condition.Trim();
                Order = Order.Trim();

                return MSSQL.Open("select " + (FieldList == "" ? "*" : FieldList) + " from [" + TableName + "]" + (Condition == "" ? "" : " where " + Condition) + (Order == "" ? "" : " order by " + Order));
            }

            /// &lt;summary&gt;
            /// 读取表
            /// &lt;/summary&gt;
            /// &lt;param name="FieldList"&gt;&lt;/param&gt;
            /// &lt;param name="Condition"&gt;&lt;/param&gt;
            /// &lt;param name="Order"&gt;&lt;/param&gt;
            /// &lt;returns&gt;&lt;/returns&gt;
            public SqlDataReader Read(string FieldList, string Condition, string Order)
            {
                FieldList = FieldList.Trim();
                Condition = Condition.Trim();
                Order = Order.Trim();

                return MSSQL.Read("select " + (FieldList == "" ? "*" : FieldList) + " from [" + TableName + "]" + (Condition == "" ? "" : " where " + Condition) + (Order == "" ? "" : " order by " + Order), false);
            }

            /// &lt;summary&gt;
            /// 读取表并返回到调用者
            /// &lt;/summary&gt;
            /// &lt;param name="FieldList"&gt;&lt;/param&gt;
            /// &lt;param name="Condition"&gt;&lt;/param&gt;
            /// &lt;param name="Order"&gt;&lt;/param&gt;
            /// &lt;returns&gt;&lt;/returns&gt;
            public SqlDataReader ReadAndSend(string FieldList, string Condition, string Order)
            {
                FieldList = FieldList.Trim();
                Condition = Condition.Trim();
                Order = Order.Trim();

                return MSSQL.Read("select " + (FieldList == "" ? "*" : FieldList) + " from [" + TableName + "]" + (Condition == "" ? "" : " where " + Condition) + (Order == "" ? "" : " order by " + Order), true);
            }

            /// &lt;summary&gt;
            /// 获取表记录数
            /// &lt;/summary&gt;
            /// &lt;param name="conn"&gt;&lt;/param&gt;
            /// &lt;param name="Condition"&gt;&lt;/param&gt;
            /// &lt;returns&gt;&lt;/returns&gt;
            public long GetCount(string Condition)
            {
                Condition = Condition.Trim();

                object Result = MSSQL.ExecuteScalar("select count(*) from [" + TableName + "]" + (Condition == "" ? "" : " where " + Condition));

                if (Result == null)
                {
                    return 0;
                }

                return long.Parse(Result.ToString());
            }

            /// &lt;summary&gt;
            /// 增加记录
            /// &lt;/summary&gt;
            /// &lt;returns&gt;返回 &lt; 0 表示失败，返回 0 表示成功，无自增值，&gt; 0 表示自增值&lt;/returns&gt;
            public long Insert()
            {
                if (Fields.Count &lt; 1)
                {
                    return -101;
                }

                string InsertFieldsList = "";
                string InsertValuesList = "";
                MSSQL.Parameter[] Parameters = new MSSQL.Parameter[Fields.Count];

                for (int i = 0; i &lt; Fields.Count; i++)
                {
                    if (i &gt; 0)
                    {
                        InsertFieldsList += ", ";
                        InsertValuesList += ", ";
                    }

                    InsertFieldsList += "[" + Fields[i].Name + "]";
                    InsertValuesList += "@" + Fields[i].CanonicalIdentifierName;

                    Parameters[i] = new MSSQL.Parameter(Fields[i].CanonicalIdentifierName, Fields[i].DbType, 0, ParameterDirection.Input, Fields[i].Value);
                }

                string CommandText = "insert into [" + TableName + "] (" + InsertFieldsList + ") values (" + InsertValuesList + "); select isnull(cast(scope_identity() as bigint), -99999999)";

                object objResult = MSSQL.ExecuteScalar(CommandText, Parameters);

                if (objResult == null)
                {
                    return -102;
                }

                Fields.Clear();

                long Result = (long)objResult;

                if (Result == -99999999)
                {
                    return 0;
                }

                return Result;
            }

            /// &lt;summary&gt;
            /// 删除表记录
            /// &lt;/summary&gt;
            /// &lt;param name="Condition"&gt;&lt;/param&gt;
            /// &lt;returns&gt;&lt;/returns&gt;
            public long Delete(string Condition)
            {
                Condition = Condition.Trim();

                object objResult = MSSQL.ExecuteScalar("delete from [" + TableName + "]" + (Condition == "" ? "" : " where " + Condition) + "; select isnull(cast(rowcount_big() as bigint), -99999999)");

                if (objResult == null)
                {
                    return -102;
                }

                Fields.Clear();

                long Result = (long)objResult;

                if (Result == -99999999)
                {
                    return 0;
                }

                return Result;
            }

            /// &lt;summary&gt;
            /// 更新表
            /// &lt;/summary&gt;
            /// &lt;param name="Condition"&gt;&lt;/param&gt;
            /// &lt;returns&gt;&lt;/returns&gt;
            public long Update(string Condition)
            {
                if (Fields.Count &lt; 1)
                {
                    return -101;
                }

                Condition = Condition.Trim();

                string CommandText = "update [" + TableName + "] set ";
                MSSQL.Parameter[] Parameters = new MSSQL.Parameter[Fields.Count];

                for (int i = 0; i &lt; Fields.Count; i++)
                {
                    if (i &gt; 0)
                    {
                        CommandText += ", ";
                    }

                    CommandText += "[" + Fields[i].Name + "] = @" + Fields[i].CanonicalIdentifierName;

                    Parameters[i] = new MSSQL.Parameter(Fields[i].CanonicalIdentifierName, Fields[i].DbType, 0, ParameterDirection.Input, Fields[i].Value);
                }

                if (!String.IsNullOrEmpty(Condition))
                {
                    CommandText += " where " + Condition;
                }

                CommandText += "; select isnull(cast(rowcount_big() as bigint), -99999999)";

                object objResult = MSSQL.ExecuteScalar(CommandText, Parameters);

                if (objResult == null)
                {
                    return -102;
                }

                Fields.Clear();

                long Result = (long)objResult;

                if (Result == -99999999)
                {
                    return 0;
                }

                return Result;
            }
        }

        /// &lt;summary&gt;
        /// 视图的基类
        /// &lt;/summary&gt;
        public class ViewBase
        {
            public string ViewName = "";

            /// &lt;summary&gt;
            /// 打开视图
            /// &lt;/summary&gt;
            /// &lt;param name="conn"&gt;&lt;/param&gt;
            /// &lt;param name="FieldList"&gt;&lt;/param&gt;
            /// &lt;param name="Condition"&gt;&lt;/param&gt;
            /// &lt;param name="Order"&gt;&lt;/param&gt;
            /// &lt;returns&gt;&lt;/returns&gt;
            public DataTable Open(string FieldList, string Condition, string Order)
            {
                FieldList = FieldList.Trim();
                Condition = Condition.Trim();
                Order = Order.Trim();

                return MSSQL.Open("select " + (FieldList == "" ? "*" : FieldList) + " from [" + ViewName + "]" + (Condition == "" ? "" : " where " + Condition) + (Order == "" ? "" : " order by " + Order));
            }

            /// &lt;summary&gt;
            /// 读取视图
            /// &lt;/summary&gt;
            /// &lt;param name="FieldList"&gt;&lt;/param&gt;
            /// &lt;param name="Condition"&gt;&lt;/param&gt;
            /// &lt;param name="Order"&gt;&lt;/param&gt;
            /// &lt;returns&gt;&lt;/returns&gt;
            public SqlDataReader Read(string FieldList, string Condition, string Order)
            {
                FieldList = FieldList.Trim();
                Condition = Condition.Trim();
                Order = Order.Trim();

                return MSSQL.Read("select " + (FieldList == "" ? "*" : FieldList) + " from [" + ViewName + "]" + (Condition == "" ? "" : " where " + Condition) + (Order == "" ? "" : " order by " + Order), false);
            }

            /// &lt;summary&gt;
            /// 读取视图并返回到调用者
            /// &lt;/summary&gt;
            /// &lt;param name="FieldList"&gt;&lt;/param&gt;
            /// &lt;param name="Condition"&gt;&lt;/param&gt;
            /// &lt;param name="Order"&gt;&lt;/param&gt;
            /// &lt;returns&gt;&lt;/returns&gt;
            public SqlDataReader ReadAndSend(string FieldList, string Condition, string Order)
            {
                FieldList = FieldList.Trim();
                Condition = Condition.Trim();
                Order = Order.Trim();

                return MSSQL.Read("select " + (FieldList == "" ? "*" : FieldList) + " from [" + ViewName + "]" + (Condition == "" ? "" : " where " + Condition) + (Order == "" ? "" : " order by " + Order), true);
            }

            /// &lt;summary&gt;
            /// 获取视图记录数
            /// &lt;/summary&gt;
            /// &lt;param name="Condition"&gt;&lt;/param&gt;
            /// &lt;returns&gt;&lt;/returns&gt;
            public long GetCount(string Condition)
            {
                Condition = Condition.Trim();

                object Result = MSSQL.ExecuteScalar("select count(*) from [" + ViewName + "]" + (Condition == "" ? "" : " where " + Condition));

                if (Result == null)
                {
                    return 0;
                }

                return long.Parse(Result.ToString());
            }
        }
    }

    /// &lt;summary&gt;
    /// 持久化
    /// &lt;/summary&gt;
    public class DAL
    {
        /// &lt;summary&gt;
        /// 表
        /// &lt;/summary&gt;
        public class Tables
        {
/*[$Replace_Tables$]*/        }

        /// &lt;summary&gt;
        /// 视图
        /// &lt;/summary&gt;
        public class Views
        {
/*[$Replace_Views$]*/        }
    }
}</value>
  </data>
  <data name="SQLiteToMSSQL_VIEW" xml:space="preserve">
    <value>IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[date]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[date]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[strftime]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[strftime]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[time]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[time]
GO
CREATE FUNCTION [dbo].[date] ()
RETURNS varchar(10)
AS
BEGIN
	RETURN cast(Year(getdate()) as varchar) + '-' + cast(Month(getdate()) as varchar) + '-' + cast(Day(getdate()) as varchar)
END
GO
CREATE FUNCTION [dbo].[strftime]
(
	@format VARCHAR(100), @timestring DATETIME
)
RETURNS VARCHAR(1000)
AS
BEGIN
	DECLARE @result VARCHAR(1000)
	DECLARE @len INT
	DECLARE @i INT
	DECLARE @format_start BIT
	DECLARE @current_char VARCHAR(1)

	SET @result = ''
	SET @format_start = 0
	SET @len = LEN(@format)
	SET @i = 1
	
	WHILE @i &lt;= @len
	BEGIN
		SET @current_char = SUBSTRING(@format, @i, 1);

		IF @format_start = 0
		BEGIN
			IF @current_char &lt;&gt; '%'
				SET @result = @result + @current_char
			ELSE
				SET @format_start = 1

			SET @i = @i + 1;
			CONTINUE
		END

		SET @format_start = 0;

		IF cast(@current_char as varbinary) = cast('Y' as varbinary)
			SET @result = @result + cast(YEAR(@timestring) as varchar)
		ELSE IF cast(@current_char as varbinary) = cast('m' as varbinary)
			SET @result = @result + cast(MONTH(@timestring) as varchar)
		ELSE IF cast(@current_char as varbinary) = cast('d' as varbinary)
			SET @result = @result + cast(DAY(@timestring) as varchar)
		ELSE IF cast(@current_char as varbinary) = cast('H' as varbinary)
			SET @result = @result + cast(datepart(hh, @timestring) as varchar)
		ELSE IF cast(@current_char as varbinary) = cast('M' as varbinary)
			SET @result = @result + cast(datepart(mi, @timestring) as varchar)
		ELSE IF cast(@current_char as varbinary) = cast('S' as varbinary)
			SET @result = @result + cast(datepart(ss, @timestring) as varchar)
		ELSE IF cast(@current_char as varbinary) = cast('j' as varbinary)
			SET @result = @result + cast(datepart(dy, @timestring) as varchar)
		ELSE IF cast(@current_char as varbinary) = cast('f' as varbinary)
			SET @result = @result + cast(datepart(ss, @timestring) as varchar) + '.' + cast(datepart(ms, @timestring) as varchar)
		ELSE IF cast(@current_char as varbinary) = cast('s' as varbinary)
			SET @result = @result + cast(datediff(ss, '1970-1-1 0:0:0', @timestring) as varchar)
		ELSE IF cast(@current_char as varbinary) = cast('w' as varbinary)
			SET @result = @result + cast(datepart(dw, @timestring) - 1 as varchar)
		ELSE IF cast(@current_char as varbinary) = cast('W' as varbinary)
			SET @result = @result + cast(datepart(wk, @timestring) as varchar)
		ELSE
			SET @result = @result + @current_char

		SET @i = @i + 1
	END
	
	RETURN @result
END
GO
CREATE FUNCTION [dbo].[time] ()
RETURNS varchar(8)
AS
BEGIN
	RETURN cast(datepart(hh, getdate()) as varchar) + ':' + cast(datepart(mi, getdate()) as varchar) + ':' + cast(datepart(ss, getdate()) as varchar)
END
GO</value>
  </data>
</root>