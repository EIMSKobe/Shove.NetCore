//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



[System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.4")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="sms_gatewaySoap")]
public interface sms_gatewaySoap
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SMSReceive", ReplyAction="*")]
    [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
    System.Threading.Tasks.Task<ArrayOfXElement> SMSReceiveAsync(string RegCode, string TimeStamp, string Sign, string Content, string To);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SendSMS_2", ReplyAction="*")]
    [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
    System.Threading.Tasks.Task<ArrayOfXElement> SendSMS_2Async(string RegCode, string TimeStamp, string Sign, string Content, string To, System.DateTime SendTime);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/QueryBalance", ReplyAction="*")]
    [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
    System.Threading.Tasks.Task<ArrayOfXElement> QueryBalanceAsync(string RegCode, string TimeStamp, string Sign);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.4")]
public interface sms_gatewaySoapChannel : sms_gatewaySoap, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.4")]
public partial class sms_gatewaySoapClient : System.ServiceModel.ClientBase<sms_gatewaySoap>, sms_gatewaySoap
{
    
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
    
    public sms_gatewaySoapClient(EndpointConfiguration endpointConfiguration) : 
            base(sms_gatewaySoapClient.GetBindingForEndpoint(endpointConfiguration), sms_gatewaySoapClient.GetEndpointAddress(endpointConfiguration))
    {
        this.Endpoint.Name = endpointConfiguration.ToString();
        ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
    }
    
    public sms_gatewaySoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
            base(sms_gatewaySoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
    {
        this.Endpoint.Name = endpointConfiguration.ToString();
        ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
    }
    
    public sms_gatewaySoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(sms_gatewaySoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
    {
        this.Endpoint.Name = endpointConfiguration.ToString();
        ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
    }
    
    public sms_gatewaySoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public System.Threading.Tasks.Task<ArrayOfXElement> SMSReceiveAsync(string RegCode, string TimeStamp, string Sign, string Content, string To)
    {
        return base.Channel.SMSReceiveAsync(RegCode, TimeStamp, Sign, Content, To);
    }
    
    public System.Threading.Tasks.Task<ArrayOfXElement> SendSMS_2Async(string RegCode, string TimeStamp, string Sign, string Content, string To, System.DateTime SendTime)
    {
        return base.Channel.SendSMS_2Async(RegCode, TimeStamp, Sign, Content, To, SendTime);
    }
    
    public System.Threading.Tasks.Task<ArrayOfXElement> QueryBalanceAsync(string RegCode, string TimeStamp, string Sign)
    {
        return base.Channel.QueryBalanceAsync(RegCode, TimeStamp, Sign);
    }
    
    public virtual System.Threading.Tasks.Task OpenAsync()
    {
        return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
    }
    
    public virtual System.Threading.Tasks.Task CloseAsync()
    {
        return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
    }
    
    private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
    {
        if ((endpointConfiguration == EndpointConfiguration.sms_gatewaySoap))
        {
            System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
            result.MaxBufferSize = int.MaxValue;
            result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
            result.MaxReceivedMessageSize = int.MaxValue;
            result.AllowCookies = true;
            return result;
        }
        if ((endpointConfiguration == EndpointConfiguration.sms_gatewaySoap12))
        {
            System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
            System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
            textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
            result.Elements.Add(textBindingElement);
            System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
            httpBindingElement.AllowCookies = true;
            httpBindingElement.MaxBufferSize = int.MaxValue;
            httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
            result.Elements.Add(httpBindingElement);
            return result;
        }
        throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
    }
    
    private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
    {
        if ((endpointConfiguration == EndpointConfiguration.sms_gatewaySoap))
        {
            return new System.ServiceModel.EndpointAddress("http://sms.gateway.i3km.com/sms_gateway.asmx");
        }
        if ((endpointConfiguration == EndpointConfiguration.sms_gatewaySoap12))
        {
            return new System.ServiceModel.EndpointAddress("http://sms.gateway.i3km.com/sms_gateway.asmx");
        }
        throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
    }
    
    public enum EndpointConfiguration
    {
        
        sms_gatewaySoap,
        
        sms_gatewaySoap12,
    }
}

[System.Xml.Serialization.XmlSchemaProviderAttribute(null, IsAny=true)]
[System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.4")]
public partial class ArrayOfXElement : object, System.Xml.Serialization.IXmlSerializable
{
    
    private System.Collections.Generic.List<System.Xml.Linq.XElement> nodesList = new System.Collections.Generic.List<System.Xml.Linq.XElement>();
    
    public ArrayOfXElement()
    {
    }
    
    public virtual System.Collections.Generic.List<System.Xml.Linq.XElement> Nodes
    {
        get
        {
            return this.nodesList;
        }
    }
    
    public virtual System.Xml.Schema.XmlSchema GetSchema()
    {
        throw new System.NotImplementedException();
    }
    
    public virtual void WriteXml(System.Xml.XmlWriter writer)
    {
        System.Collections.Generic.IEnumerator<System.Xml.Linq.XElement> e = nodesList.GetEnumerator();
        for (
        ; e.MoveNext(); 
        )
        {
            ((System.Xml.Serialization.IXmlSerializable)(e.Current)).WriteXml(writer);
        }
    }
    
    public virtual void ReadXml(System.Xml.XmlReader reader)
    {
        for (
        ; (reader.NodeType != System.Xml.XmlNodeType.EndElement); 
        )
        {
            if ((reader.NodeType == System.Xml.XmlNodeType.Element))
            {
                System.Xml.Linq.XElement elem = new System.Xml.Linq.XElement("default");
                ((System.Xml.Serialization.IXmlSerializable)(elem)).ReadXml(reader);
                Nodes.Add(elem);
            }
            else
            {
                reader.Skip();
            }
        }
    }
}
