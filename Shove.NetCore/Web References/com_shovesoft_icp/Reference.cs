//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



[System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.4")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="GatewaySoap")]
public interface GatewaySoap
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IcpBeianQueryRealTime", ReplyAction="*")]
    System.Threading.Tasks.Task<IcpBeianQueryRealTimeResponse> IcpBeianQueryRealTimeAsync(IcpBeianQueryRealTimeRequest request);
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.4")]
[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
[System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
public partial class IcpBeianQueryRealTimeRequest
{
    
    [System.ServiceModel.MessageBodyMemberAttribute(Name="IcpBeianQueryRealTime", Namespace="http://tempuri.org/", Order=0)]
    public IcpBeianQueryRealTimeRequestBody Body;
    
    public IcpBeianQueryRealTimeRequest()
    {
    }
    
    public IcpBeianQueryRealTimeRequest(IcpBeianQueryRealTimeRequestBody Body)
    {
        this.Body = Body;
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.4")]
[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
[System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
public partial class IcpBeianQueryRealTimeRequestBody
{
    
    [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
    public string WhoAreYou;
    
    [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
    public string DomainName;
    
    public IcpBeianQueryRealTimeRequestBody()
    {
    }
    
    public IcpBeianQueryRealTimeRequestBody(string WhoAreYou, string DomainName)
    {
        this.WhoAreYou = WhoAreYou;
        this.DomainName = DomainName;
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.4")]
[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
[System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
public partial class IcpBeianQueryRealTimeResponse
{
    
    [System.ServiceModel.MessageBodyMemberAttribute(Name="IcpBeianQueryRealTimeResponse", Namespace="http://tempuri.org/", Order=0)]
    public IcpBeianQueryRealTimeResponseBody Body;
    
    public IcpBeianQueryRealTimeResponse()
    {
    }
    
    public IcpBeianQueryRealTimeResponse(IcpBeianQueryRealTimeResponseBody Body)
    {
        this.Body = Body;
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.4")]
[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
[System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
public partial class IcpBeianQueryRealTimeResponseBody
{
    
    [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
    public string IcpBeianQueryRealTimeResult;
    
    public IcpBeianQueryRealTimeResponseBody()
    {
    }
    
    public IcpBeianQueryRealTimeResponseBody(string IcpBeianQueryRealTimeResult)
    {
        this.IcpBeianQueryRealTimeResult = IcpBeianQueryRealTimeResult;
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.4")]
public interface GatewaySoapChannel : GatewaySoap, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.4")]
public partial class GatewaySoapClient : System.ServiceModel.ClientBase<GatewaySoap>, GatewaySoap
{
    
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
    
    public GatewaySoapClient(EndpointConfiguration endpointConfiguration) : 
            base(GatewaySoapClient.GetBindingForEndpoint(endpointConfiguration), GatewaySoapClient.GetEndpointAddress(endpointConfiguration))
    {
        this.Endpoint.Name = endpointConfiguration.ToString();
        ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
    }
    
    public GatewaySoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
            base(GatewaySoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
    {
        this.Endpoint.Name = endpointConfiguration.ToString();
        ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
    }
    
    public GatewaySoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(GatewaySoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
    {
        this.Endpoint.Name = endpointConfiguration.ToString();
        ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
    }
    
    public GatewaySoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.Threading.Tasks.Task<IcpBeianQueryRealTimeResponse> GatewaySoap.IcpBeianQueryRealTimeAsync(IcpBeianQueryRealTimeRequest request)
    {
        return base.Channel.IcpBeianQueryRealTimeAsync(request);
    }
    
    public System.Threading.Tasks.Task<IcpBeianQueryRealTimeResponse> IcpBeianQueryRealTimeAsync(string WhoAreYou, string DomainName)
    {
        IcpBeianQueryRealTimeRequest inValue = new IcpBeianQueryRealTimeRequest();
        inValue.Body = new IcpBeianQueryRealTimeRequestBody();
        inValue.Body.WhoAreYou = WhoAreYou;
        inValue.Body.DomainName = DomainName;
        return ((GatewaySoap)(this)).IcpBeianQueryRealTimeAsync(inValue);
    }
    
    public virtual System.Threading.Tasks.Task OpenAsync()
    {
        return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
    }
    
    public virtual System.Threading.Tasks.Task CloseAsync()
    {
        return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
    }
    
    private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
    {
        if ((endpointConfiguration == EndpointConfiguration.GatewaySoap))
        {
            System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
            result.MaxBufferSize = int.MaxValue;
            result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
            result.MaxReceivedMessageSize = int.MaxValue;
            result.AllowCookies = true;
            return result;
        }
        if ((endpointConfiguration == EndpointConfiguration.GatewaySoap12))
        {
            System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
            System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
            textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
            result.Elements.Add(textBindingElement);
            System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
            httpBindingElement.AllowCookies = true;
            httpBindingElement.MaxBufferSize = int.MaxValue;
            httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
            result.Elements.Add(httpBindingElement);
            return result;
        }
        throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
    }
    
    private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
    {
        if ((endpointConfiguration == EndpointConfiguration.GatewaySoap))
        {
            return new System.ServiceModel.EndpointAddress("http://icp.shovesoft.com/Gateway.asmx");
        }
        if ((endpointConfiguration == EndpointConfiguration.GatewaySoap12))
        {
            return new System.ServiceModel.EndpointAddress("http://icp.shovesoft.com/Gateway.asmx");
        }
        throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
    }
    
    public enum EndpointConfiguration
    {
        
        GatewaySoap,
        
        GatewaySoap12,
    }
}
